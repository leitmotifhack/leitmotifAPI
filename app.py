from flask import Flask
from flask_restplus import Resource, Api, fields
from database import db_session
from models import BlogPost
from flask import jsonify

import transform

application = Flask(__name__)
api = Api(
    application,
    version="0.1",
    title="Our sample API",
    description="This is our sample API",
)

test_data = """\
# This data file generated by 23andMe at: Fri Sep 28 10:52:40 2018
#
# This file contains raw genotype data, including data that is not used in 23andMe reports.
# This data has undergone a general quality review however only a subset of markers have been
# individually validated for accuracy. As such, this data is suitable only for research,
# educational, and informational use and not for medical or other use.
#
# Below is a text version of your data.  Fields are TAB-separated
# Each line corresponds to a single SNP.  For each SNP, we provide its identifier
# (an rsid or an internal id), its location on the reference human genome, and the
# genotype call oriented with respect to the plus strand on the human reference sequence.
# We are using reference human assembly build 37 (also known as Annotation Release 104).
# Note that it is possible that data downloaded at different times may be different due to ongoing
# improvements in our ability to call genotypes. More information about these changes can be found at:
# https://you.23andme.com/p/bd734743ae65a3ad/tools/data/download/
#
# More information on reference human assembly build 37 (aka Annotation Release 104):
# http://www.ncbi.nlm.nih.gov/mapview/map_search.cgi?taxid=9606
#
# rsid	chromosome	position	genotype
rs548049170	1	69869	TT
rs13328684	1	74792	--
rs9283150	1	565508	AA
i713426	1	726912	--
rs116587930	1	727841	GG"""


@api.route("/testnotes")
class test_transform_23_and_me_dataset_to_notes(Resource):
    def get(self):
        notes = transform.transform_23_and_me_dataset_to_notes(test_data)
        return {"notes": notes}


@api.route("/hello")
class HelloWorld(Resource):
    def get(self):
        return {"hello": "world"}


@api.route("/blog_posts")
class BlogPosts(Resource):
    model = api.model(
        "Model", {"id": fields.Integer, "title": fields.String, "post": fields.String}
    )

    @api.marshal_with(model, envelope="resource")
    def get(self, **kwargs):
        return BlogPost.query.all()


@application.teardown_appcontext
def shutdown_session(exception=None):
    db_session.remove()


if __name__ == "__main__":
    application.run(debug=True)
